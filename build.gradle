buildscript {
    ext {
        springBootVersion = "2.6.9" as String
        querydslVersion = "1.0.10" as String
    }
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            url("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslVersion}")
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom(developmentOnly)
    }
}

dependencies {
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")
    compile("com.querydsl:querydsl-core") // querydsl
    compile("com.querydsl:querydsl-jpa") // querydsl

    compile("io.springfox:springfox-boot-starter:3.0.0")
    compile("io.springfox:springfox-swagger-ui:3.0.0")

    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2") // mybatis

    implementation 'org.jetbrains:annotations:20.1.0'
    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test")

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-validation")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-batch")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    compile("commons-io:commons-io:2.5")
    compile("com.h2database:h2")
    compile("org.projectlombok:lombok")
    compile("org.seleniumhq.selenium:selenium-java:4.0.0")
    annotationProcessor("org.projectlombok:lombok")
}

def generated = "src/main/generated"

sourceSets {
    main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}